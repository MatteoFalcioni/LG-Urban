services:
  # Cleanup old sandbox containers from previous runs
  cleanup:
    image: docker:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
        echo 'ðŸ§¹ Cleaning up old sandbox containers...';
        docker stop $$(docker ps -q --filter 'name=sbox-') 2>/dev/null || true;
        docker rm $$(docker ps -aq --filter 'name=sbox-') 2>/dev/null || true;
        echo 'âœ… Cleanup complete';
        exit 0
      "
    networks:
      - langgraph-network

  # PostgreSQL database
  db:
    image: postgres:16
    container_name: lg_urban_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-chat}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - langgraph-network

  # Build sandbox image (used by backend to spawn containers)
  sandbox:
    build:
      context: .
      dockerfile: Dockerfile.sandbox
    image: sandbox:latest
    networks:
      - langgraph-network
    # This service just builds the image and exits
    profiles:
      - build

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: lg_urban_backend
    depends_on:
      cleanup:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/chat
      ALEMBIC_DATABASE_URL: postgresql+psycopg2://postgres:postgres@db:5432/chat
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY:-}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-}
      DEFAULT_MODEL: ${DEFAULT_MODEL:-gpt-4o}
      DEFAULT_TEMPERATURE: ${DEFAULT_TEMPERATURE:-0.7}
      CONTEXT_WINDOW: ${CONTEXT_WINDOW:-30000}
      LANGSMITH_TRACING: ${LANGSMITH_TRACING}
      LANGSMITH_ENDPOINT: ${LANGSMITH_ENDPOINT}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT: ${LANGSMITH_PROJECT}
      SANDBOX_IMAGE: sandbox:latest
      SESSION_STORAGE: TMPFS
      TMPFS_SIZE_MB: 1024
      DATASET_ACCESS: ${DATASET_ACCESS:-NONE}
      HYBRID_LOCAL_PATH: ${HYBRID_LOCAL_PATH:-/home/matteo/LG-Urban/heavy_llm_data}
      BLOBSTORE_DIR: /app/blobstore
      SANDBOX_NETWORK: langgraph-network
      MAX_ARTIFACT_SIZE_MB: 50
      ARTIFACTS_SECRET: ${ARTIFACTS_SECRET:-fixed-secret-key-for-development}
      ARTIFACTS_TOKEN_TTL_SECONDS: ${ARTIFACTS_TOKEN_TTL_SECONDS:-86400}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      CORS_ORIGINS: http://localhost,http://localhost:80
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Allow backend to spawn sandbox containers
      - blobstore:/app/blobstore
      - encryption_key:/app/.encryption_key_data  # Persist encryption key across restarts
      - sessions:/app/sessions
      - checkpoints:/app/checkpoints  # LangGraph SQLite checkpointer persistence
      - ./heavy_llm_data:/heavy_llm_data:ro  # Heavy datasets for HYBRID mode
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - langgraph-network
    restart: unless-stopped

  # Frontend web app
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: lg_urban_frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - langgraph-network
    restart: unless-stopped

  # Database admin UI (optional, can be removed in production)
  adminer:
    image: adminer:4
    container_name: lg_urban_adminer
    depends_on:
      db:
        condition: service_healthy  # Wait for DB to be healthy
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DEFAULT_DB: chat
      ADMINER_DEFAULT_USER: postgres
      ADMINER_DEFAULT_PASSWORD: postgres
    networks:
      - langgraph-network

volumes:
  pg_data:
  blobstore:
  sessions:
  checkpoints:
  encryption_key:

networks:
  langgraph-network:
    name: langgraph-network
    external: true

