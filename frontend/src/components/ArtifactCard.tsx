/**
 * ArtifactCard: displays artifact metadata with download link.
 * Used to show files generated by code execution (plots, CSVs, etc.)
 */

import { FileText, Image, FileCode, Download } from 'lucide-react';
import type { Artifact } from '@/types/api';

interface ArtifactCardProps {
  artifact: Artifact;
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${(bytes / Math.pow(k, i)).toFixed(1)} ${sizes[i]}`;
}

function getIconForMime(mime: string) {
  if (mime.startsWith('image/')) {
    return <Image size={16} className="text-blue-600 dark:text-blue-400" />;
  }
  if (mime.includes('text/') || mime.includes('csv')) {
    return <FileText size={16} className="text-green-600 dark:text-green-400" />;
  }
  if (mime.includes('json') || mime.includes('javascript') || mime.includes('python')) {
    return <FileCode size={16} className="text-purple-600 dark:text-purple-400" />;
  }
  return <FileText size={16} className="text-gray-600 dark:text-gray-400" />;
}

export function ArtifactCard({ artifact }: ArtifactCardProps) {
  const { name, mime, size, url } = artifact;
  const isImage = mime.startsWith('image/');
  const isHtml = mime === 'text/html';

  return (
    <div className="space-y-2">
      {/* Image preview for image files */}
      {isImage && (
        <div className="rounded-lg overflow-hidden border border-gray-200 dark:border-slate-600">
          <img 
            src={url} 
            alt={name}
            className="w-full h-auto max-h-96 object-contain bg-white dark:bg-slate-900"
          />
        </div>
      )}
      
      {/* HTML preview for HTML files */}
      {isHtml && (
        <div className="rounded-lg overflow-hidden border border-gray-200 dark:border-slate-600 bg-white dark:bg-slate-900">
          <iframe
            src={url}
            className="w-full h-96 border-0 bg-white"
            title={name}
            sandbox="allow-scripts allow-same-origin"
          />
        </div>
      )}
      
      {/* File info and download */}
      <div className="flex items-center gap-3 p-3 bg-gray-50 dark:bg-slate-700/50 border border-gray-200 dark:border-slate-600 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors">
        {/* Icon */}
        <div className="flex-shrink-0 w-10 h-10 bg-white dark:bg-slate-800 rounded-lg flex items-center justify-center border border-gray-200 dark:border-slate-600">
          {getIconForMime(mime)}
        </div>

        {/* File info */}
        <div className="flex-1 min-w-0">
          <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
            {name}
          </p>
          <p className="text-xs text-gray-500 dark:text-slate-400">
            {mime} Â· {formatFileSize(size)}
          </p>
        </div>

        {/* Download button */}
        <a
          href={url}
          download={name}
          className="flex-shrink-0 p-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          title={`Download ${name}`}
        >
          <Download size={16} />
        </a>
      </div>
    </div>
  );
}

/**
 * ArtifactGrid: displays multiple artifacts in a grid layout
 */
interface ArtifactGridProps {
  artifacts: Artifact[];
}

export function ArtifactGrid({ artifacts }: ArtifactGridProps) {
  if (!artifacts || artifacts.length === 0) {
    return null;
  }

  return (
    <div className="mt-3 space-y-2">
      <p className="text-xs font-semibold text-gray-500 dark:text-slate-400 uppercase tracking-wide">
        Generated Files ({artifacts.length})
      </p>
      <div className="space-y-2">
        {artifacts.map((artifact) => (
          <ArtifactCard key={artifact.id} artifact={artifact} />
        ))}
      </div>
    </div>
  );
}

