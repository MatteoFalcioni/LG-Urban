/**
 * ArtifactCard: displays artifact metadata with download link.
 * Used to show files generated by code execution (plots, CSVs, etc.)
 */

import { useState } from 'react';
import { FileText, Image, FileCode, Download, Maximize2, X } from 'lucide-react';
import type { Artifact } from '@/types/api';

interface ArtifactCardProps {
  artifact: Artifact;
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${(bytes / Math.pow(k, i)).toFixed(1)} ${sizes[i]}`;
}

function getIconForMime(mime: string) {
  if (mime.startsWith('image/')) {
    return <Image size={16} className="text-blue-600 dark:text-blue-400" />;
  }
  if (mime.includes('text/') || mime.includes('csv')) {
    return <FileText size={16} className="text-green-600 dark:text-green-400" />;
  }
  if (mime.includes('json') || mime.includes('javascript') || mime.includes('python')) {
    return <FileCode size={16} className="text-purple-600 dark:text-purple-400" />;
  }
  return <FileText size={16} className="text-gray-600 dark:text-gray-400" />;
}

export function ArtifactCard({ artifact }: ArtifactCardProps) {
  const { name, mime, size, url } = artifact;
  const isImage = mime.startsWith('image/');
  const isHtml = mime === 'text/html';
  const [isFullscreen, setIsFullscreen] = useState(false);

  const canFullscreen = isImage || isHtml;

  return (
    <>
      <div className="flex flex-col space-y-3">
        {/* Images without frame, HTML and others with beige frame */}
        {isImage ? (
          /* Static plots with small beige frame */
          <div 
            className="rounded-xl overflow-hidden shadow-sm p-2 relative group"
            style={{ backgroundColor: 'var(--bg-secondary)' }}
          >
            <img 
              src={url} 
              alt={name}
              className="w-full object-contain rounded-lg"
              style={{ 
                maxHeight: '800px',
                objectFit: 'contain'
              }}
            />
            {/* Fullscreen button for images */}
            <button
              onClick={() => setIsFullscreen(true)}
              className="absolute top-4 right-4 p-2 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-gray-200/50 dark:border-slate-700/50 rounded-lg shadow-md hover:shadow-lg hover:bg-white dark:hover:bg-slate-800 transition-all duration-200 opacity-0 group-hover:opacity-100"
              title="Fullscreen"
            >
              <Maximize2 size={18} className="text-gray-700 dark:text-slate-300" />
            </button>
          </div>
        ) : (
          /* HTML and other files with beige card */
          <div 
            className={`rounded-xl overflow-hidden shadow-sm relative group ${isHtml ? 'aspect-square' : 'h-24'}`}
            style={{ backgroundColor: 'var(--bg-secondary)', color: 'var(--text-primary)' }}
          >
            {isHtml ? (
              <>
                <iframe
                  src={url}
                  className="w-full h-full border-0"
                  title={name}
                  sandbox="allow-scripts allow-same-origin"
                />
                {/* Fullscreen button for HTML */}
                <button
                  onClick={() => setIsFullscreen(true)}
                  className="absolute top-4 right-4 p-2 bg-white/90 dark:bg-slate-800/90 backdrop-blur-sm border border-gray-200/50 dark:border-slate-700/50 rounded-lg shadow-md hover:shadow-lg hover:bg-white dark:hover:bg-slate-800 transition-all duration-200 opacity-0 group-hover:opacity-100"
                  title="Fullscreen"
                >
                  <Maximize2 size={18} className="text-gray-700 dark:text-slate-300" />
                </button>
              </>
            ) : (
              <div className="w-full h-full flex items-center justify-center p-4">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-white/10 rounded-lg flex items-center justify-center">
                    {getIconForMime(mime)}
                  </div>
                  <div className="text-left">
                    <p className="text-sm font-medium truncate max-w-48" title={name}>
                      {name}
                    </p>
                    <p className="text-xs opacity-75">
                      {formatFileSize(size)}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
        
        {/* Download button inline below - reduced spacing for images */}
        <div className={`flex justify-center ${isImage ? 'mt-2' : 'mt-3'}`}>
          <a
            href={url}
            download={name}
            className="px-6 py-3 bg-gray-800 dark:bg-slate-700 text-white dark:text-slate-100 rounded-xl hover:bg-gray-700 dark:hover:bg-slate-600 transition-colors flex items-center space-x-2 text-sm font-medium shadow-sm"
            title={`Download ${name}`}
          >
            <Download size={16} />
            <span>Download</span>
          </a>
        </div>
      </div>

      {/* Fullscreen Modal */}
      {isFullscreen && canFullscreen && (
        <div 
          className="fixed inset-0 z-50 bg-black/95 flex items-center justify-center p-4"
          onClick={() => setIsFullscreen(false)}
        >
          <button
            onClick={() => setIsFullscreen(false)}
            className="absolute top-6 right-6 p-3 bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 rounded-lg shadow-lg transition-all duration-200 group z-10"
            title="Close fullscreen"
          >
            <X size={24} className="text-white" />
          </button>

          <div 
            className="w-full h-full max-w-[95vw] max-h-[95vh] flex items-center justify-center"
            onClick={(e) => e.stopPropagation()}
          >
            {isImage ? (
              <img 
                src={url} 
                alt={name}
                className="max-w-full max-h-full object-contain"
              />
            ) : isHtml ? (
              <iframe
                src={url}
                className="w-full h-full border-0 rounded-lg"
                title={name}
                sandbox="allow-scripts allow-same-origin"
              />
            ) : null}
          </div>
        </div>
      )}
    </>
  );
}

/**
 * ArtifactGrid: displays multiple artifacts in a grid layout
 */
interface ArtifactGridProps {
  artifacts: Artifact[];
}

export function ArtifactGrid({ artifacts }: ArtifactGridProps) {
  if (!artifacts || artifacts.length === 0) {
    return null;
  }

  return (
    <div className="mt-3 space-y-4">
      <p className="text-xs font-semibold text-gray-500 dark:text-slate-400 uppercase tracking-wide">
        Generated Files ({artifacts.length})
      </p>
      <div className="grid grid-cols-1 gap-6 max-w-2xl mx-auto">
        {artifacts.map((artifact) => (
          <ArtifactCard key={artifact.id} artifact={artifact} />
        ))}
      </div>
    </div>
  );
}

