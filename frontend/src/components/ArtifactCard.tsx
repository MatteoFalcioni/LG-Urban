/**
 * ArtifactCard: displays artifact metadata with download link.
 * Used to show files generated by code execution (plots, CSVs, etc.)
 */

import { FileText, Image, FileCode, Download } from 'lucide-react';
import type { Artifact } from '@/types/api';

interface ArtifactCardProps {
  artifact: Artifact;
}

function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${(bytes / Math.pow(k, i)).toFixed(1)} ${sizes[i]}`;
}

function getIconForMime(mime: string) {
  if (mime.startsWith('image/')) {
    return <Image size={16} className="text-blue-600 dark:text-blue-400" />;
  }
  if (mime.includes('text/') || mime.includes('csv')) {
    return <FileText size={16} className="text-green-600 dark:text-green-400" />;
  }
  if (mime.includes('json') || mime.includes('javascript') || mime.includes('python')) {
    return <FileCode size={16} className="text-purple-600 dark:text-purple-400" />;
  }
  return <FileText size={16} className="text-gray-600 dark:text-gray-400" />;
}

export function ArtifactCard({ artifact }: ArtifactCardProps) {
  const { name, mime, size, url } = artifact;
  const isImage = mime.startsWith('image/');
  const isHtml = mime === 'text/html';

  return (
    <div className="flex flex-col space-y-2">
      {/* Square artifact card with preview */}
      <div className="aspect-square rounded-lg border border-gray-200 dark:border-slate-600 overflow-hidden bg-white dark:bg-slate-900">
        {/* Preview content */}
        {isImage ? (
          <img 
            src={url} 
            alt={name}
            className="w-full h-full object-contain"
          />
        ) : isHtml ? (
          <iframe
            src={url}
            className="w-full h-full border-0"
            title={name}
            sandbox="allow-scripts allow-same-origin"
          />
        ) : (
          <div className="w-full h-full flex flex-col items-center justify-center p-4">
            <div className="w-12 h-12 bg-gray-100 dark:bg-slate-800 rounded-lg flex items-center justify-center border border-gray-200 dark:border-slate-600 mb-3">
              {getIconForMime(mime)}
            </div>
            <div className="text-center space-y-1">
              <p className="text-sm font-medium text-gray-900 dark:text-white truncate" title={name}>
                {name}
              </p>
              <p className="text-xs text-gray-500 dark:text-slate-400">
                {mime}
              </p>
              <p className="text-xs text-gray-500 dark:text-slate-400">
                {formatFileSize(size)}
              </p>
            </div>
          </div>
        )}
      </div>
      
      {/* Download button inline below */}
      <div className="flex justify-center">
        <a
          href={url}
          download={name}
          className="px-4 py-2 bg-gray-800 dark:bg-slate-700 text-white dark:text-slate-100 rounded-lg hover:bg-gray-700 dark:hover:bg-slate-600 transition-colors flex items-center space-x-2 text-sm font-medium"
          title={`Download ${name}`}
        >
          <Download size={16} />
          <span>Download</span>
        </a>
      </div>
    </div>
  );
}

/**
 * ArtifactGrid: displays multiple artifacts in a grid layout
 */
interface ArtifactGridProps {
  artifacts: Artifact[];
}

export function ArtifactGrid({ artifacts }: ArtifactGridProps) {
  if (!artifacts || artifacts.length === 0) {
    return null;
  }

  return (
    <div className="mt-3 space-y-4">
      <p className="text-xs font-semibold text-gray-500 dark:text-slate-400 uppercase tracking-wide">
        Generated Files ({artifacts.length})
      </p>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
        {artifacts.map((artifact) => (
          <ArtifactCard key={artifact.id} artifact={artifact} />
        ))}
      </div>
    </div>
  );
}

